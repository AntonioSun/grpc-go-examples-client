// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: techunits/techunits.proto

package SamplePackage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CreateEntry(ctx context.Context, in *EntryCreateRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	CreateBulkEntries(ctx context.Context, opts ...grpc.CallOption) (SampleService_CreateBulkEntriesClient, error)
	UpdateEntry(ctx context.Context, in *EntryUpdateRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	UploadEntryFile(ctx context.Context, opts ...grpc.CallOption) (SampleService_UploadEntryFileClient, error)
	ListEntries(ctx context.Context, in *EntryListRequest, opts ...grpc.CallOption) (*EntryListResponse, error)
	StreamEntries(ctx context.Context, in *EntryListRequest, opts ...grpc.CallOption) (SampleService_StreamEntriesClient, error)
	GetEntryInfo(ctx context.Context, in *EntryDetailRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	DeleteEntry(ctx context.Context, in *EntryDetailRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	NotDefinedSample(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type sampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleServiceClient(cc grpc.ClientConnInterface) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/SamplePackage.SampleService/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) CreateEntry(ctx context.Context, in *EntryCreateRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, "/SamplePackage.SampleService/createEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) CreateBulkEntries(ctx context.Context, opts ...grpc.CallOption) (SampleService_CreateBulkEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[0], "/SamplePackage.SampleService/createBulkEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceCreateBulkEntriesClient{stream}
	return x, nil
}

type SampleService_CreateBulkEntriesClient interface {
	Send(*EntryCreateRequest) error
	Recv() (*EntryResponse, error)
	grpc.ClientStream
}

type sampleServiceCreateBulkEntriesClient struct {
	grpc.ClientStream
}

func (x *sampleServiceCreateBulkEntriesClient) Send(m *EntryCreateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sampleServiceCreateBulkEntriesClient) Recv() (*EntryResponse, error) {
	m := new(EntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sampleServiceClient) UpdateEntry(ctx context.Context, in *EntryUpdateRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, "/SamplePackage.SampleService/updateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) UploadEntryFile(ctx context.Context, opts ...grpc.CallOption) (SampleService_UploadEntryFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[1], "/SamplePackage.SampleService/uploadEntryFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceUploadEntryFileClient{stream}
	return x, nil
}

type SampleService_UploadEntryFileClient interface {
	Send(*EntryFileUploadRequest) error
	CloseAndRecv() (*EntryResponse, error)
	grpc.ClientStream
}

type sampleServiceUploadEntryFileClient struct {
	grpc.ClientStream
}

func (x *sampleServiceUploadEntryFileClient) Send(m *EntryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sampleServiceUploadEntryFileClient) CloseAndRecv() (*EntryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sampleServiceClient) ListEntries(ctx context.Context, in *EntryListRequest, opts ...grpc.CallOption) (*EntryListResponse, error) {
	out := new(EntryListResponse)
	err := c.cc.Invoke(ctx, "/SamplePackage.SampleService/listEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) StreamEntries(ctx context.Context, in *EntryListRequest, opts ...grpc.CallOption) (SampleService_StreamEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[2], "/SamplePackage.SampleService/streamEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceStreamEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SampleService_StreamEntriesClient interface {
	Recv() (*EntryResponse, error)
	grpc.ClientStream
}

type sampleServiceStreamEntriesClient struct {
	grpc.ClientStream
}

func (x *sampleServiceStreamEntriesClient) Recv() (*EntryResponse, error) {
	m := new(EntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sampleServiceClient) GetEntryInfo(ctx context.Context, in *EntryDetailRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, "/SamplePackage.SampleService/getEntryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) DeleteEntry(ctx context.Context, in *EntryDetailRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, "/SamplePackage.SampleService/deleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) NotDefinedSample(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/SamplePackage.SampleService/notDefinedSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleServiceServer is the server API for SampleService service.
// All implementations must embed UnimplementedSampleServiceServer
// for forward compatibility
type SampleServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CreateEntry(context.Context, *EntryCreateRequest) (*EntryResponse, error)
	CreateBulkEntries(SampleService_CreateBulkEntriesServer) error
	UpdateEntry(context.Context, *EntryUpdateRequest) (*EntryResponse, error)
	UploadEntryFile(SampleService_UploadEntryFileServer) error
	ListEntries(context.Context, *EntryListRequest) (*EntryListResponse, error)
	StreamEntries(*EntryListRequest, SampleService_StreamEntriesServer) error
	GetEntryInfo(context.Context, *EntryDetailRequest) (*EntryResponse, error)
	DeleteEntry(context.Context, *EntryDetailRequest) (*EntryResponse, error)
	NotDefinedSample(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedSampleServiceServer()
}

// UnimplementedSampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSampleServiceServer struct {
}

func (UnimplementedSampleServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSampleServiceServer) CreateEntry(context.Context, *EntryCreateRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntry not implemented")
}
func (UnimplementedSampleServiceServer) CreateBulkEntries(SampleService_CreateBulkEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBulkEntries not implemented")
}
func (UnimplementedSampleServiceServer) UpdateEntry(context.Context, *EntryUpdateRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (UnimplementedSampleServiceServer) UploadEntryFile(SampleService_UploadEntryFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadEntryFile not implemented")
}
func (UnimplementedSampleServiceServer) ListEntries(context.Context, *EntryListRequest) (*EntryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedSampleServiceServer) StreamEntries(*EntryListRequest, SampleService_StreamEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEntries not implemented")
}
func (UnimplementedSampleServiceServer) GetEntryInfo(context.Context, *EntryDetailRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryInfo not implemented")
}
func (UnimplementedSampleServiceServer) DeleteEntry(context.Context, *EntryDetailRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedSampleServiceServer) NotDefinedSample(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotDefinedSample not implemented")
}
func (UnimplementedSampleServiceServer) mustEmbedUnimplementedSampleServiceServer() {}

// UnsafeSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleServiceServer will
// result in compilation errors.
type UnsafeSampleServiceServer interface {
	mustEmbedUnimplementedSampleServiceServer()
}

func RegisterSampleServiceServer(s grpc.ServiceRegistrar, srv SampleServiceServer) {
	s.RegisterService(&SampleService_ServiceDesc, srv)
}

func _SampleService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SamplePackage.SampleService/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SamplePackage.SampleService/createEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).CreateEntry(ctx, req.(*EntryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_CreateBulkEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServiceServer).CreateBulkEntries(&sampleServiceCreateBulkEntriesServer{stream})
}

type SampleService_CreateBulkEntriesServer interface {
	Send(*EntryResponse) error
	Recv() (*EntryCreateRequest, error)
	grpc.ServerStream
}

type sampleServiceCreateBulkEntriesServer struct {
	grpc.ServerStream
}

func (x *sampleServiceCreateBulkEntriesServer) Send(m *EntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sampleServiceCreateBulkEntriesServer) Recv() (*EntryCreateRequest, error) {
	m := new(EntryCreateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SampleService_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SamplePackage.SampleService/updateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).UpdateEntry(ctx, req.(*EntryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_UploadEntryFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServiceServer).UploadEntryFile(&sampleServiceUploadEntryFileServer{stream})
}

type SampleService_UploadEntryFileServer interface {
	SendAndClose(*EntryResponse) error
	Recv() (*EntryFileUploadRequest, error)
	grpc.ServerStream
}

type sampleServiceUploadEntryFileServer struct {
	grpc.ServerStream
}

func (x *sampleServiceUploadEntryFileServer) SendAndClose(m *EntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sampleServiceUploadEntryFileServer) Recv() (*EntryFileUploadRequest, error) {
	m := new(EntryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SampleService_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SamplePackage.SampleService/listEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListEntries(ctx, req.(*EntryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_StreamEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EntryListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SampleServiceServer).StreamEntries(m, &sampleServiceStreamEntriesServer{stream})
}

type SampleService_StreamEntriesServer interface {
	Send(*EntryResponse) error
	grpc.ServerStream
}

type sampleServiceStreamEntriesServer struct {
	grpc.ServerStream
}

func (x *sampleServiceStreamEntriesServer) Send(m *EntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SampleService_GetEntryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetEntryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SamplePackage.SampleService/getEntryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetEntryInfo(ctx, req.(*EntryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SamplePackage.SampleService/deleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).DeleteEntry(ctx, req.(*EntryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_NotDefinedSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).NotDefinedSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SamplePackage.SampleService/notDefinedSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).NotDefinedSample(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleService_ServiceDesc is the grpc.ServiceDesc for SampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SamplePackage.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _SampleService_Ping_Handler,
		},
		{
			MethodName: "createEntry",
			Handler:    _SampleService_CreateEntry_Handler,
		},
		{
			MethodName: "updateEntry",
			Handler:    _SampleService_UpdateEntry_Handler,
		},
		{
			MethodName: "listEntries",
			Handler:    _SampleService_ListEntries_Handler,
		},
		{
			MethodName: "getEntryInfo",
			Handler:    _SampleService_GetEntryInfo_Handler,
		},
		{
			MethodName: "deleteEntry",
			Handler:    _SampleService_DeleteEntry_Handler,
		},
		{
			MethodName: "notDefinedSample",
			Handler:    _SampleService_NotDefinedSample_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "createBulkEntries",
			Handler:       _SampleService_CreateBulkEntries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "uploadEntryFile",
			Handler:       _SampleService_UploadEntryFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "streamEntries",
			Handler:       _SampleService_StreamEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "techunits/techunits.proto",
}
